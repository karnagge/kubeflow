name: Data Generation
description: Generates synthetic data for training the XGBoost model
inputs: []
outputs:
  - {name: train_data, description: 'Training dataset'}
  - {name: val_data, description: 'Validation dataset'}
  - {name: test_data, description: 'Test dataset'}
implementation:
  container:
    image: python:3.8
    command:
      - python
      - -c
      - |
        import numpy as np
        import pandas as pd
        from sklearn.datasets import make_classification
        from sklearn.model_selection import train_test_split
        import os

        # Set random seed
        np.random.seed(42)

        # Generate synthetic data
        X, y = make_classification(
            n_samples=10000,
            n_features=20,
            n_informative=15,
            n_redundant=5,
            n_classes=2,
            random_state=42,
            class_sep=0.8,
            flip_y=0.1
        )

        # Create feature names
        feature_names = [f'feature_{i}' for i in range(20)]
        df = pd.DataFrame(X, columns=feature_names)
        df['target'] = y

        # Split data
        train_val, test = train_test_split(df, test_size=0.2, random_state=42, stratify=df['target'])
        train, val = train_test_split(train_val, test_size=0.25, random_state=42, stratify=train_val['target'])

        # Save datasets
        os.makedirs(os.path.dirname('{{outputs.train_data}}'), exist_ok=True)
        os.makedirs(os.path.dirname('{{outputs.val_data}}'), exist_ok=True)
        os.makedirs(os.path.dirname('{{outputs.test_data}}'), exist_ok=True)

        train.to_csv('{{outputs.train_data}}', index=False)
        val.to_csv('{{outputs.val_data}}', index=False)
        test.to_csv('{{outputs.test_data}}', index=False)